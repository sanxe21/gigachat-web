import { AxiosInstance } from 'axios';
import { AccessToken, AICheckResult, Balance, Chat, ChatCompletion, ChatCompletionChunk, DeletedFile, Embeddings, Image, Model, Models, Tokens, UploadedFile, UploadedFiles, WithXHeaders } from './interfaces';
import { Settings } from './settings';
import { EventEmitter } from 'events';
export interface GigaChatClientConfig {
    /** Адрес относительно которого выполняются запросы */
    baseUrl?: string;
    /** Адрес для запроса токена доступа OAuth 2.0 */
    authUrl?: string;
    /** Авторизационные данные */
    credentials?: string;
    /** Версия API, к которой предоставляется доступ */
    scope?: string;
    /** JWE токен */
    accessToken?: string;
    /** Название модели, от которой нужно получить ответ */
    model?: string;
    /** Параметр цензуры */
    profanityCheck?: boolean;
    /** Имя пользователя */
    user?: string;
    /** Пароль */
    password?: string;
    /** Таймаут в секундах */
    timeout?: number;
    /** Детализация запросов в консоли */
    verbose?: boolean;
    /** Флаги, включающие особенные фичи */
    flags?: string[];
    /** HTTPS Agent, который прокидывается в Axios клиент */
    httpsAgent?: any;
    /** Включает работу библиотеку в браузере */
    dangerouslyAllowBrowser?: boolean;
}
export interface DetectedImage {
    uuid?: string;
    postfix?: string;
}
export interface DetectedVideo {
    uuid?: string;
    cover_uuid?: string;
    postfix?: string;
}
export declare function detectImage(message: string): DetectedImage | null;
export declare function detectVideo(message: string): DetectedVideo | null;
export declare class GigaChat {
    _client: AxiosInstance;
    _authClient: AxiosInstance;
    _settings: Settings;
    protected _accessToken?: AccessToken;
    constructor(config: GigaChatClientConfig);
    protected get token(): string | undefined;
    protected get useAuth(): boolean;
    protected checkValidityToken(): boolean;
    protected resetToken(): void;
    protected parseChat(payload: Chat | Record<string, any> | string): Chat;
    private _getAxiosConfig;
    private _getAuthAxiosConfig;
    updateToken(): Promise<void>;
    private _decorator;
    tokensCount(input: string[], model?: string): Promise<Tokens & WithXHeaders>;
    aiCheck(input: string, model: string): Promise<AICheckResult & WithXHeaders>;
    balance(): Promise<Balance & WithXHeaders>;
    embeddings(texts: string[], model?: string): Promise<Embeddings>;
    getModels(): Promise<Models>;
    getModel(model: string): Promise<Model>;
    getImage(fileId: string): Promise<Image>;
    uploadFile(file: File, purpose?: 'general' | 'assistant'): Promise<UploadedFile>;
    getFile(file: string): Promise<UploadedFile>;
    getFiles(): Promise<UploadedFiles>;
    deleteFile(file: string): Promise<DeletedFile>;
    chat(payload: Chat | Record<string, any> | string): Promise<ChatCompletion & WithXHeaders>;
    stream_readable(payload: Chat | Record<string, any> | string, abortSignal?: AbortSignal): Promise<EventEmitter>;
    stream(payload: Chat | Record<string, any> | string, abortSignal?: AbortSignal): AsyncIterable<ChatCompletionChunk & WithXHeaders>;
    private _buildAccessToken;
}
export default GigaChat;
//# sourceMappingURL=index.d.ts.map