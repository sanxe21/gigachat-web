import { USER_AGENT } from "../constants.mjs";
import { AuthenticationError, ResponseError } from "../exceptions.mjs";
import { v4 as uuidv4 } from 'uuid';
function getRequestConfig(args) {
    const headers = {
        Authorization: `Basic ${args.credentials}`,
        RqUID: uuidv4(),
        'User-Agent': USER_AGENT,
        'Content-Type': 'application/x-www-form-urlencoded',
        Accept: 'application/json',
    };
    return {
        method: 'POST',
        url: args.url,
        data: { scope: args.scope },
        headers: headers,
    };
}
function buildResponse(response) {
    if (response.status === 200) {
        return response.data;
    }
    else if (response.status === 401) {
        console.error(response.data);
        throw new AuthenticationError(response);
    }
    else {
        console.error(response.data);
        throw new ResponseError(response);
    }
}
function validateCredentials(credentials) {
    const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    if (!base64regex.test(credentials)) {
        console.warn('Possibly invalid credentials format. Please use only base64 credentials (Authorization data, not client secret!)');
    }
}
export async function post_auth(client, args) {
    validateCredentials(args.credentials);
    const config = getRequestConfig(args);
    const response = await client.request(config);
    return buildResponse(response);
}
//# sourceMappingURL=post_auth.mjs.map